// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct StartRequest {
  var path: String

  static func fromList(_ list: [Any?]) -> StartRequest? {
    let path = list[0] as! String

    return StartRequest(
      path: path
    )
  }
  func toList() -> [Any?] {
    return [
      path,
    ]
  }
}

private class FastScreenRecorderHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return StartRequest.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class FastScreenRecorderHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? StartRequest {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FastScreenRecorderHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FastScreenRecorderHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FastScreenRecorderHostApiCodecWriter(data: data)
  }
}

class FastScreenRecorderHostApiCodec: FlutterStandardMessageCodec {
  static let shared = FastScreenRecorderHostApiCodec(readerWriter: FastScreenRecorderHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FastScreenRecorderHostApi {
  func start(request: StartRequest) throws
  func capture(completion: @escaping (Result<Void, Error>) -> Void)
  func stop() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FastScreenRecorderHostApiSetup {
  /// The codec used by FastScreenRecorderHostApi.
  static var codec: FlutterStandardMessageCodec { FastScreenRecorderHostApiCodec.shared }
  /// Sets up an instance of `FastScreenRecorderHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FastScreenRecorderHostApi?) {
    let startChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.FastScreenRecorderHostApi.start", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! StartRequest
        do {
          try api.start(request: requestArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startChannel.setMessageHandler(nil)
    }
    let captureChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.FastScreenRecorderHostApi.capture", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      captureChannel.setMessageHandler { _, reply in
        api.capture() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      captureChannel.setMessageHandler(nil)
    }
    let stopChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.FastScreenRecorderHostApi.stop", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopChannel.setMessageHandler { _, reply in
        do {
          try api.stop()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopChannel.setMessageHandler(nil)
    }
  }
}
