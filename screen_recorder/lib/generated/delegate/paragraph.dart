// ignore_for_file: unused_import

// -------------------------------------------------------------
// AUTOMATICALLY GENERATED BY CODE GENERATOR, PLEASE DO NOT EDIT
// -------------------------------------------------------------

import 'dart:typed_data';
import 'dart:ui';

import 'package:screen_recorder/delegate_base/paragraph.dart';
import 'package:screen_recorder/generated/record/paragraph.dart';

class MyParagraph extends MyParagraphBase implements Paragraph {
  MyParagraph(super.proxy);

  @override
  double get width {
    final result = proxy.width;
    return result;
  }

  @override
  double get height {
    final result = proxy.height;
    return result;
  }

  @override
  double get longestLine {
    final result = proxy.longestLine;
    return result;
  }

  @override
  double get minIntrinsicWidth {
    final result = proxy.minIntrinsicWidth;
    return result;
  }

  @override
  double get maxIntrinsicWidth {
    final result = proxy.maxIntrinsicWidth;
    return result;
  }

  @override
  double get alphabeticBaseline {
    final result = proxy.alphabeticBaseline;
    return result;
  }

  @override
  double get ideographicBaseline {
    final result = proxy.ideographicBaseline;
    return result;
  }

  @override
  bool get didExceedMaxLines {
    final result = proxy.didExceedMaxLines;
    return result;
  }

  @override
  void layout(ParagraphConstraints constraints) {
    final result = proxy.layout(constraints);
    return result;
  }

  @override
  List<TextBox> getBoxesForRange(
    int start,
    int end, {
    BoxHeightStyle boxHeightStyle = BoxHeightStyle.tight,
    BoxWidthStyle boxWidthStyle = BoxWidthStyle.tight,
  }) {
    final result = proxy.getBoxesForRange(
      start,
      end,
      boxHeightStyle: boxHeightStyle,
      boxWidthStyle: boxWidthStyle,
    );
    return result;
  }

  @override
  List<TextBox> getBoxesForPlaceholders() {
    final result = proxy.getBoxesForPlaceholders();
    return result;
  }

  @override
  TextPosition getPositionForOffset(Offset offset) {
    final result = proxy.getPositionForOffset(offset);
    return result;
  }

  @override
  TextRange getWordBoundary(TextPosition position) {
    final result = proxy.getWordBoundary(position);
    return result;
  }

  @override
  TextRange getLineBoundary(TextPosition position) {
    final result = proxy.getLineBoundary(position);
    return result;
  }

  @override
  List<LineMetrics> computeLineMetrics() {
    final result = proxy.computeLineMetrics();
    return result;
  }

  @override
  void dispose() {
    final result = proxy.dispose();
    return result;
  }

  @override
  bool get debugDisposed {
    final result = proxy.debugDisposed;
    return result;
  }
}
