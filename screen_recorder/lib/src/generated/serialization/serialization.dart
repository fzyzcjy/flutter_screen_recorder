// -------------------------------------------------------------
// AUTOMATICALLY GENERATED BY CODE GENERATOR, PLEASE DO NOT EDIT
// -------------------------------------------------------------

import 'dart:developer';
import 'dart:ui';

import 'package:screen_recorder/src/delegate_base/paragraph.dart';
import 'package:screen_recorder/src/delegate_base/paragraph_builder.dart';
import 'package:screen_recorder/src/frame_packet.dart';
import 'package:screen_recorder/src/generated/record/canvas.dart';
import 'package:screen_recorder/src/generated/record/paragraph_builder.dart';
import 'package:screen_recorder/src/generated/record/scene_builder.dart';
import 'package:screen_recorder/src/record_list.dart';
import 'package:screen_recorder/src/serialization.dart';
import 'package:screen_recorder/src/touch/touch_data.dart';

Clip fromBytesClip(ContextBytesReader reader) {
  return Clip.values[fromBytesUint8(reader)];
}

void toBytesClip(ContextBytesWriter writer, Clip value) {
  toBytesUint8(writer, value.index);
}

ClipOp fromBytesClipOp(ContextBytesReader reader) {
  return ClipOp.values[fromBytesUint8(reader)];
}

void toBytesClipOp(ContextBytesWriter writer, ClipOp value) {
  toBytesUint8(writer, value.index);
}

BlendMode fromBytesBlendMode(ContextBytesReader reader) {
  return BlendMode.values[fromBytesUint8(reader)];
}

void toBytesBlendMode(ContextBytesWriter writer, BlendMode value) {
  toBytesUint8(writer, value.index);
}

FilterQuality fromBytesFilterQuality(ContextBytesReader reader) {
  return FilterQuality.values[fromBytesUint8(reader)];
}

void toBytesFilterQuality(ContextBytesWriter writer, FilterQuality value) {
  toBytesUint8(writer, value.index);
}

PointMode fromBytesPointMode(ContextBytesReader reader) {
  return PointMode.values[fromBytesUint8(reader)];
}

void toBytesPointMode(ContextBytesWriter writer, PointMode value) {
  toBytesUint8(writer, value.index);
}

PlaceholderAlignment fromBytesPlaceholderAlignment(ContextBytesReader reader) {
  return PlaceholderAlignment.values[fromBytesUint8(reader)];
}

void toBytesPlaceholderAlignment(ContextBytesWriter writer, PlaceholderAlignment value) {
  toBytesUint8(writer, value.index);
}

TextBaseline fromBytesTextBaseline(ContextBytesReader reader) {
  return TextBaseline.values[fromBytesUint8(reader)];
}

void toBytesTextBaseline(ContextBytesWriter writer, TextBaseline value) {
  toBytesUint8(writer, value.index);
}

TextAlign fromBytesTextAlign(ContextBytesReader reader) {
  return TextAlign.values[fromBytesUint8(reader)];
}

void toBytesTextAlign(ContextBytesWriter writer, TextAlign value) {
  toBytesUint8(writer, value.index);
}

TextDirection fromBytesTextDirection(ContextBytesReader reader) {
  return TextDirection.values[fromBytesUint8(reader)];
}

void toBytesTextDirection(ContextBytesWriter writer, TextDirection value) {
  toBytesUint8(writer, value.index);
}

TextLeadingDistribution fromBytesTextLeadingDistribution(ContextBytesReader reader) {
  return TextLeadingDistribution.values[fromBytesUint8(reader)];
}

void toBytesTextLeadingDistribution(ContextBytesWriter writer, TextLeadingDistribution value) {
  toBytesUint8(writer, value.index);
}

TextDecorationStyle fromBytesTextDecorationStyle(ContextBytesReader reader) {
  return TextDecorationStyle.values[fromBytesUint8(reader)];
}

void toBytesTextDecorationStyle(ContextBytesWriter writer, TextDecorationStyle value) {
  toBytesUint8(writer, value.index);
}

FontStyle fromBytesFontStyle(ContextBytesReader reader) {
  return FontStyle.values[fromBytesUint8(reader)];
}

void toBytesFontStyle(ContextBytesWriter writer, FontStyle value) {
  toBytesUint8(writer, value.index);
}

FontWeight fromBytesFontWeight(ContextBytesReader reader) {
  return FontWeight.values[fromBytesUint8(reader)];
}

void toBytesFontWeight(ContextBytesWriter writer, FontWeight value) {
  toBytesUint8(writer, value.index);
}

Offset fromBytesOffset(ContextBytesReader reader) {
  final dx = fromBytesDouble(reader);
  final dy = fromBytesDouble(reader);
  return Offset(
    dx,
    dy,
  );
}

void toBytesOffset(ContextBytesWriter writer, Offset value) {
  toBytesDouble(writer, value.dx);
  toBytesDouble(writer, value.dy);
}

Rect fromBytesRect(ContextBytesReader reader) {
  final left = fromBytesDouble(reader);
  final top = fromBytesDouble(reader);
  final right = fromBytesDouble(reader);
  final bottom = fromBytesDouble(reader);
  return Rect.fromLTRB(
    left,
    top,
    right,
    bottom,
  );
}

void toBytesRect(ContextBytesWriter writer, Rect value) {
  toBytesDouble(writer, value.left);
  toBytesDouble(writer, value.top);
  toBytesDouble(writer, value.right);
  toBytesDouble(writer, value.bottom);
}

RRect fromBytesRRect(ContextBytesReader reader) {
  final left = fromBytesDouble(reader);
  final top = fromBytesDouble(reader);
  final right = fromBytesDouble(reader);
  final bottom = fromBytesDouble(reader);
  final tlRadiusX = fromBytesDouble(reader);
  final tlRadiusY = fromBytesDouble(reader);
  final trRadiusX = fromBytesDouble(reader);
  final trRadiusY = fromBytesDouble(reader);
  final brRadiusX = fromBytesDouble(reader);
  final brRadiusY = fromBytesDouble(reader);
  final blRadiusX = fromBytesDouble(reader);
  final blRadiusY = fromBytesDouble(reader);
  return RRect.fromLTRBAndCorners(
    left,
    top,
    right,
    bottom,
    topLeft: Radius.elliptical(tlRadiusX, tlRadiusY),
    topRight: Radius.elliptical(trRadiusX, trRadiusY),
    bottomLeft: Radius.elliptical(blRadiusX, blRadiusY),
    bottomRight: Radius.elliptical(brRadiusX, brRadiusY),
  );
}

void toBytesRRect(ContextBytesWriter writer, RRect value) {
  toBytesDouble(writer, value.left);
  toBytesDouble(writer, value.top);
  toBytesDouble(writer, value.right);
  toBytesDouble(writer, value.bottom);
  toBytesDouble(writer, value.tlRadiusX);
  toBytesDouble(writer, value.tlRadiusY);
  toBytesDouble(writer, value.trRadiusX);
  toBytesDouble(writer, value.trRadiusY);
  toBytesDouble(writer, value.brRadiusX);
  toBytesDouble(writer, value.brRadiusY);
  toBytesDouble(writer, value.blRadiusX);
  toBytesDouble(writer, value.blRadiusY);
}

RSTransform fromBytesRSTransform(ContextBytesReader reader) {
  final scos = fromBytesDouble(reader);
  final ssin = fromBytesDouble(reader);
  final tx = fromBytesDouble(reader);
  final ty = fromBytesDouble(reader);
  return RSTransform(
    scos,
    ssin,
    tx,
    ty,
  );
}

void toBytesRSTransform(ContextBytesWriter writer, RSTransform value) {
  toBytesDouble(writer, value.scos);
  toBytesDouble(writer, value.ssin);
  toBytesDouble(writer, value.tx);
  toBytesDouble(writer, value.ty);
}

ParagraphStyle fromBytesParagraphStyle(ContextBytesReader reader) {
  final textAlign = fromBytesNullable(reader, fromBytesTextAlign);
  final textDirection = fromBytesNullable(reader, fromBytesTextDirection);
  final maxLines = fromBytesNullable(reader, fromBytesInt);
  final fontFamily = fromBytesNullable(reader, fromBytesString);
  final fontSize = fromBytesNullable(reader, fromBytesDouble);
  final height = fromBytesNullable(reader, fromBytesDouble);
  final textHeightBehavior = fromBytesNullable(reader, fromBytesTextHeightBehavior);
  final fontWeight = fromBytesNullable(reader, fromBytesFontWeight);
  final fontStyle = fromBytesNullable(reader, fromBytesFontStyle);
  final strutStyle = fromBytesNullable(reader, fromBytesStrutStyle);
  final ellipsis = fromBytesNullable(reader, fromBytesString);
  final locale = fromBytesNullable(reader, fromBytesLocale);
  return ParagraphStyle(
    textAlign: textAlign,
    textDirection: textDirection,
    maxLines: maxLines,
    fontFamily: fontFamily,
    fontSize: fontSize,
    height: height,
    textHeightBehavior: textHeightBehavior,
    fontWeight: fontWeight,
    fontStyle: fontStyle,
    strutStyle: strutStyle,
    ellipsis: ellipsis,
    locale: locale,
  );
}

void toBytesParagraphStyle(ContextBytesWriter writer, ParagraphStyle value) {
  toBytesNullable(writer, value.textAlign, toBytesTextAlign);
  toBytesNullable(writer, value.textDirection, toBytesTextDirection);
  toBytesNullable(writer, value.maxLines, toBytesInt);
  toBytesNullable(writer, value.fontFamily, toBytesString);
  toBytesNullable(writer, value.fontSize, toBytesDouble);
  toBytesNullable(writer, value.height, toBytesDouble);
  toBytesNullable(writer, value.textHeightBehavior, toBytesTextHeightBehavior);
  toBytesNullable(writer, value.fontWeight, toBytesFontWeight);
  toBytesNullable(writer, value.fontStyle, toBytesFontStyle);
  toBytesNullable(writer, value.strutStyle, toBytesStrutStyle);
  toBytesNullable(writer, value.ellipsis, toBytesString);
  toBytesNullable(writer, value.locale, toBytesLocale);
}

TextStyle fromBytesTextStyle(ContextBytesReader reader) {
  final color = fromBytesNullable(reader, fromBytesColor);
  final decoration = fromBytesNullable(reader, fromBytesTextDecoration);
  final decorationColor = fromBytesNullable(reader, fromBytesColor);
  final decorationStyle = fromBytesNullable(reader, fromBytesTextDecorationStyle);
  final decorationThickness = fromBytesNullable(reader, fromBytesDouble);
  final fontWeight = fromBytesNullable(reader, fromBytesFontWeight);
  final fontStyle = fromBytesNullable(reader, fromBytesFontStyle);
  final textBaseline = fromBytesNullable(reader, fromBytesTextBaseline);
  final fontFamily = fromBytesNullable(reader, fromBytesString);
  final fontFamilyFallback = fromBytesNullableList(reader, fromBytesString);
  final fontSize = fromBytesNullable(reader, fromBytesDouble);
  final letterSpacing = fromBytesNullable(reader, fromBytesDouble);
  final wordSpacing = fromBytesNullable(reader, fromBytesDouble);
  final height = fromBytesNullable(reader, fromBytesDouble);
  final leadingDistribution = fromBytesNullable(reader, fromBytesTextLeadingDistribution);
  final locale = fromBytesNullable(reader, fromBytesLocale);
  final background = fromBytesNullable(reader, fromBytesPaint);
  final foreground = fromBytesNullable(reader, fromBytesPaint);
  final shadows = fromBytesNullableList(reader, fromBytesShadow);
  final fontFeatures = fromBytesNullableList(reader, fromBytesFontFeature);
  final fontVariations = fromBytesNullableList(reader, fromBytesFontVariation);
  return TextStyle(
    color: color,
    decoration: decoration,
    decorationColor: decorationColor,
    decorationStyle: decorationStyle,
    decorationThickness: decorationThickness,
    fontWeight: fontWeight,
    fontStyle: fontStyle,
    textBaseline: textBaseline,
    fontFamily: fontFamily,
    fontFamilyFallback: fontFamilyFallback,
    fontSize: fontSize,
    letterSpacing: letterSpacing,
    wordSpacing: wordSpacing,
    height: height,
    leadingDistribution: leadingDistribution,
    locale: locale,
    background: background,
    foreground: foreground,
    shadows: shadows,
    fontFeatures: fontFeatures,
    fontVariations: fontVariations,
  );
}

void toBytesTextStyle(ContextBytesWriter writer, TextStyle value) {
  toBytesNullable(writer, value.color, toBytesColor);
  toBytesNullable(writer, value.decoration, toBytesTextDecoration);
  toBytesNullable(writer, value.decorationColor, toBytesColor);
  toBytesNullable(writer, value.decorationStyle, toBytesTextDecorationStyle);
  toBytesNullable(writer, value.decorationThickness, toBytesDouble);
  toBytesNullable(writer, value.fontWeight, toBytesFontWeight);
  toBytesNullable(writer, value.fontStyle, toBytesFontStyle);
  toBytesNullable(writer, value.textBaseline, toBytesTextBaseline);
  toBytesNullable(writer, value.fontFamily, toBytesString);
  toBytesNullableList(writer, value.fontFamilyFallback, toBytesString);
  toBytesNullable(writer, value.fontSize, toBytesDouble);
  toBytesNullable(writer, value.letterSpacing, toBytesDouble);
  toBytesNullable(writer, value.wordSpacing, toBytesDouble);
  toBytesNullable(writer, value.height, toBytesDouble);
  toBytesNullable(writer, value.leadingDistribution, toBytesTextLeadingDistribution);
  toBytesNullable(writer, value.locale, toBytesLocale);
  toBytesNullable(writer, value.background, toBytesPaint);
  toBytesNullable(writer, value.foreground, toBytesPaint);
  toBytesNullableList(writer, value.shadows, toBytesShadow);
  toBytesNullableList(writer, value.fontFeatures, toBytesFontFeature);
  toBytesNullableList(writer, value.fontVariations, toBytesFontVariation);
}

StrutStyle fromBytesStrutStyle(ContextBytesReader reader) {
  final encoded = fromBytesByteData(reader);
  final leadingDistribution = fromBytesNullable(reader, fromBytesTextLeadingDistribution);
  final fontFamily = fromBytesNullable(reader, fromBytesString);
  final fontFamilyFallback = fromBytesNullableList(reader, fromBytesString);
  return StrutStyle.raw(
    encoded: encoded,
    leadingDistribution: leadingDistribution,
    fontFamily: fontFamily,
    fontFamilyFallback: fontFamilyFallback,
  );
}

void toBytesStrutStyle(ContextBytesWriter writer, StrutStyle value) {
  toBytesByteData(writer, value.encoded);
  toBytesNullable(writer, value.leadingDistribution, toBytesTextLeadingDistribution);
  toBytesNullable(writer, value.fontFamily, toBytesString);
  toBytesNullableList(writer, value.fontFamilyFallback, toBytesString);
}

TextHeightBehavior fromBytesTextHeightBehavior(ContextBytesReader reader) {
  final applyHeightToFirstAscent = fromBytesBool(reader);
  final applyHeightToLastDescent = fromBytesBool(reader);
  final leadingDistribution = fromBytesTextLeadingDistribution(reader);
  return TextHeightBehavior(
    applyHeightToFirstAscent: applyHeightToFirstAscent,
    applyHeightToLastDescent: applyHeightToLastDescent,
    leadingDistribution: leadingDistribution,
  );
}

void toBytesTextHeightBehavior(ContextBytesWriter writer, TextHeightBehavior value) {
  toBytesBool(writer, value.applyHeightToFirstAscent);
  toBytesBool(writer, value.applyHeightToLastDescent);
  toBytesTextLeadingDistribution(writer, value.leadingDistribution);
}

Shadow fromBytesShadow(ContextBytesReader reader) {
  final color = fromBytesColor(reader);
  final offset = fromBytesOffset(reader);
  final blurRadius = fromBytesDouble(reader);
  return Shadow(
    color: color,
    offset: offset,
    blurRadius: blurRadius,
  );
}

void toBytesShadow(ContextBytesWriter writer, Shadow value) {
  toBytesColor(writer, value.color);
  toBytesOffset(writer, value.offset);
  toBytesDouble(writer, value.blurRadius);
}

FontVariation fromBytesFontVariation(ContextBytesReader reader) {
  final axis = fromBytesString(reader);
  final value = fromBytesDouble(reader);
  return FontVariation(
    axis,
    value,
  );
}

void toBytesFontVariation(ContextBytesWriter writer, FontVariation value) {
  toBytesString(writer, value.axis);
  toBytesDouble(writer, value.value);
}

FontFeature fromBytesFontFeature(ContextBytesReader reader) {
  final feature = fromBytesString(reader);
  final value = fromBytesInt(reader);
  return FontFeature(
    feature,
    value,
  );
}

void toBytesFontFeature(ContextBytesWriter writer, FontFeature value) {
  toBytesString(writer, value.feature);
  toBytesInt(writer, value.value);
}

Color fromBytesColor(ContextBytesReader reader) {
  final value = fromBytesInt(reader);
  return Color(value);
}

void toBytesColor(ContextBytesWriter writer, Color value) {
  toBytesInt(writer, value.value);
}

Locale fromBytesLocale(ContextBytesReader reader) {
  final languageCode = fromBytesString(reader);
  final scriptCode = fromBytesNullable(reader, fromBytesString);
  final countryCode = fromBytesNullable(reader, fromBytesString);
  return Locale.fromSubtags(
    languageCode: languageCode,
    scriptCode: scriptCode,
    countryCode: countryCode,
  );
}

void toBytesLocale(ContextBytesWriter writer, Locale value) {
  toBytesString(writer, value.languageCode);
  toBytesNullable(writer, value.scriptCode, toBytesString);
  toBytesNullable(writer, value.countryCode, toBytesString);
}

TextDecoration fromBytesTextDecoration(ContextBytesReader reader) {
  final mask = fromBytesInt(reader);
  return TextDecoration.raw(mask);
}

void toBytesTextDecoration(ContextBytesWriter writer, TextDecoration value) {
  toBytesInt(writer, value.mask);
}

Paint fromBytesPaint(ContextBytesReader reader) {
  final data = fromBytesByteData(reader);
  return Paint.raw(data);
}

void toBytesPaint(ContextBytesWriter writer, Paint value) {
  toBytesByteData(writer, value.data);
}

ParagraphBuilderRecordList fromBytesParagraphBuilderRecordList(ContextBytesReader reader) {
  return fromBytesReferable(reader, reader.context.referableContextParagraphBuilderRecordList, () {
    final objectId = fromBytesInt(reader);
    final constructorRecord = fromBytesParagraphBuilderConstructorRecord(reader);
    final methodCallRecords = fromBytesList(reader, fromBytesParagraphBuilderRecordBase);
    return ParagraphBuilderRecordList(
      objectId: objectId,
      constructorRecord: constructorRecord,
      methodCallRecords: methodCallRecords,
    );
  });
}

void toBytesParagraphBuilderRecordList(ContextBytesWriter writer, ParagraphBuilderRecordList value) {
  toBytesReferable(writer, writer.context.referableContextParagraphBuilderRecordList, value, () {
    toBytesInt(writer, value.objectId);
    toBytesParagraphBuilderConstructorRecord(writer, value.constructorRecord);
    toBytesList(writer, value.methodCallRecords, toBytesParagraphBuilderRecordBase);
  });
}

CanvasRecordList fromBytesCanvasRecordList(ContextBytesReader reader) {
  return fromBytesReferable(reader, reader.context.referableContextCanvasRecordList, () {
    final objectId = fromBytesInt(reader);
    final methodCallRecords = fromBytesList(reader, fromBytesCanvasRecordBase);
    return CanvasRecordList(
      objectId: objectId,
      methodCallRecords: methodCallRecords,
    );
  });
}

void toBytesCanvasRecordList(ContextBytesWriter writer, CanvasRecordList value) {
  toBytesReferable(writer, writer.context.referableContextCanvasRecordList, value, () {
    toBytesInt(writer, value.objectId);
    toBytesList(writer, value.methodCallRecords, toBytesCanvasRecordBase);
  });
}

SceneBuilderRecordList fromBytesSceneBuilderRecordList(ContextBytesReader reader) {
  final methodCallRecords = fromBytesList(reader, fromBytesSceneBuilderRecordBase);
  return SceneBuilderRecordList(methodCallRecords: methodCallRecords);
}

void toBytesSceneBuilderRecordList(ContextBytesWriter writer, SceneBuilderRecordList value) {
  Timeline.startSync('toBytesSceneBuilderRecordList');
  toBytesList(writer, value.methodCallRecords, toBytesSceneBuilderRecordBase);
  Timeline.finishSync();
}

ParagraphBuilder_Constructor_Record fromBytesParagraphBuilderConstructorRecord(ContextBytesReader reader) {
  final style = fromBytesParagraphStyle(reader);
  return ParagraphBuilder_Constructor_Record(style: style);
}

void toBytesParagraphBuilderConstructorRecord(ContextBytesWriter writer, ParagraphBuilder_Constructor_Record value) {
  toBytesParagraphStyle(writer, value.style);
}

ParagraphConstraints fromBytesParagraphConstraints(ContextBytesReader reader) {
  final width = fromBytesDouble(reader);
  return ParagraphConstraints(width: width);
}

void toBytesParagraphConstraints(ContextBytesWriter writer, ParagraphConstraints value) {
  toBytesDouble(writer, value.width);
}

ParagraphRecord fromBytesParagraphRecord(ContextBytesReader reader) {
  final layoutConstraints = fromBytesNullable(reader, fromBytesParagraphConstraints);
  return ParagraphRecord(layoutConstraints: layoutConstraints);
}

void toBytesParagraphRecord(ContextBytesWriter writer, ParagraphRecord value) {
  toBytesNullable(writer, value.layoutConstraints, toBytesParagraphConstraints);
}

TouchPerFrameData fromBytesTouchPerFrameData(ContextBytesReader reader) {
  final positions = fromBytesList(reader, fromBytesOffset);
  return TouchPerFrameData(positions: positions);
}

void toBytesTouchPerFrameData(ContextBytesWriter writer, TouchPerFrameData value) {
  Timeline.startSync('toBytesTouchPerFrameData');
  toBytesList(writer, value.positions, toBytesOffset);
  Timeline.finishSync();
}

FramePacket fromBytesFramePacket(ContextBytesReader reader) {
  final scene = fromBytesSceneBuilderRecordList(reader);
  final touch = fromBytesTouchPerFrameData(reader);
  return FramePacket(
    scene: scene,
    touch: touch,
  );
}

void toBytesFramePacket(ContextBytesWriter writer, FramePacket value) {
  toBytesSceneBuilderRecordList(writer, value.scene);
  toBytesTouchPerFrameData(writer, value.touch);
}

SceneBuilder_PushTransform_Record fromBytesSceneBuilderPushTransformRecord(ContextBytesReader reader) {
  final matrix4 = fromBytesFloat64List(reader);
  final layerId = fromBytesInt(reader);
  return SceneBuilder_PushTransform_Record(
    matrix4: matrix4,
    layerId: layerId,
  );
}

void toBytesSceneBuilderPushTransformRecord(ContextBytesWriter writer, SceneBuilder_PushTransform_Record value) {
  toBytesFloat64List(writer, value.matrix4);
  toBytesInt(writer, value.layerId);
}

SceneBuilder_PushOffset_Record fromBytesSceneBuilderPushOffsetRecord(ContextBytesReader reader) {
  final dx = fromBytesDouble(reader);
  final dy = fromBytesDouble(reader);
  final layerId = fromBytesInt(reader);
  return SceneBuilder_PushOffset_Record(
    dx: dx,
    dy: dy,
    layerId: layerId,
  );
}

void toBytesSceneBuilderPushOffsetRecord(ContextBytesWriter writer, SceneBuilder_PushOffset_Record value) {
  toBytesDouble(writer, value.dx);
  toBytesDouble(writer, value.dy);
  toBytesInt(writer, value.layerId);
}

SceneBuilder_PushClipRect_Record fromBytesSceneBuilderPushClipRectRecord(ContextBytesReader reader) {
  final rect = fromBytesRect(reader);
  final clipBehavior = fromBytesClip(reader);
  final layerId = fromBytesInt(reader);
  return SceneBuilder_PushClipRect_Record(
    rect: rect,
    clipBehavior: clipBehavior,
    layerId: layerId,
  );
}

void toBytesSceneBuilderPushClipRectRecord(ContextBytesWriter writer, SceneBuilder_PushClipRect_Record value) {
  toBytesRect(writer, value.rect);
  toBytesClip(writer, value.clipBehavior);
  toBytesInt(writer, value.layerId);
}

SceneBuilder_PushClipRRect_Record fromBytesSceneBuilderPushClipRRectRecord(ContextBytesReader reader) {
  final rrect = fromBytesRRect(reader);
  final clipBehavior = fromBytesClip(reader);
  final layerId = fromBytesInt(reader);
  return SceneBuilder_PushClipRRect_Record(
    rrect: rrect,
    clipBehavior: clipBehavior,
    layerId: layerId,
  );
}

void toBytesSceneBuilderPushClipRRectRecord(ContextBytesWriter writer, SceneBuilder_PushClipRRect_Record value) {
  toBytesRRect(writer, value.rrect);
  toBytesClip(writer, value.clipBehavior);
  toBytesInt(writer, value.layerId);
}

SceneBuilder_PushClipPath_Record fromBytesSceneBuilderPushClipPathRecord(ContextBytesReader reader) {
  final path = fromBytesPath(reader);
  final clipBehavior = fromBytesClip(reader);
  final layerId = fromBytesInt(reader);
  return SceneBuilder_PushClipPath_Record(
    path: path,
    clipBehavior: clipBehavior,
    layerId: layerId,
  );
}

void toBytesSceneBuilderPushClipPathRecord(ContextBytesWriter writer, SceneBuilder_PushClipPath_Record value) {
  toBytesPath(writer, value.path);
  toBytesClip(writer, value.clipBehavior);
  toBytesInt(writer, value.layerId);
}

SceneBuilder_PushOpacity_Record fromBytesSceneBuilderPushOpacityRecord(ContextBytesReader reader) {
  final alpha = fromBytesInt(reader);
  final offset = fromBytesNullable(reader, fromBytesOffset);
  final layerId = fromBytesInt(reader);
  return SceneBuilder_PushOpacity_Record(
    alpha: alpha,
    offset: offset,
    layerId: layerId,
  );
}

void toBytesSceneBuilderPushOpacityRecord(ContextBytesWriter writer, SceneBuilder_PushOpacity_Record value) {
  toBytesInt(writer, value.alpha);
  toBytesNullable(writer, value.offset, toBytesOffset);
  toBytesInt(writer, value.layerId);
}

SceneBuilder_PushColorFilter_Record fromBytesSceneBuilderPushColorFilterRecord(ContextBytesReader reader) {
  final filter = fromBytesColorFilter(reader);
  final layerId = fromBytesInt(reader);
  return SceneBuilder_PushColorFilter_Record(
    filter: filter,
    layerId: layerId,
  );
}

void toBytesSceneBuilderPushColorFilterRecord(ContextBytesWriter writer, SceneBuilder_PushColorFilter_Record value) {
  toBytesColorFilter(writer, value.filter);
  toBytesInt(writer, value.layerId);
}

SceneBuilder_PushImageFilter_Record fromBytesSceneBuilderPushImageFilterRecord(ContextBytesReader reader) {
  final filter = fromBytesImageFilter(reader);
  final offset = fromBytesOffset(reader);
  final layerId = fromBytesInt(reader);
  return SceneBuilder_PushImageFilter_Record(
    filter: filter,
    offset: offset,
    layerId: layerId,
  );
}

void toBytesSceneBuilderPushImageFilterRecord(ContextBytesWriter writer, SceneBuilder_PushImageFilter_Record value) {
  toBytesImageFilter(writer, value.filter);
  toBytesOffset(writer, value.offset);
  toBytesInt(writer, value.layerId);
}

SceneBuilder_PushBackdropFilter_Record fromBytesSceneBuilderPushBackdropFilterRecord(ContextBytesReader reader) {
  final filter = fromBytesImageFilter(reader);
  final blendMode = fromBytesBlendMode(reader);
  final layerId = fromBytesInt(reader);
  return SceneBuilder_PushBackdropFilter_Record(
    filter: filter,
    blendMode: blendMode,
    layerId: layerId,
  );
}

void toBytesSceneBuilderPushBackdropFilterRecord(
    ContextBytesWriter writer, SceneBuilder_PushBackdropFilter_Record value) {
  toBytesImageFilter(writer, value.filter);
  toBytesBlendMode(writer, value.blendMode);
  toBytesInt(writer, value.layerId);
}

SceneBuilder_PushShaderMask_Record fromBytesSceneBuilderPushShaderMaskRecord(ContextBytesReader reader) {
  final shader = fromBytesShader(reader);
  final maskRect = fromBytesRect(reader);
  final blendMode = fromBytesBlendMode(reader);
  final filterQuality = fromBytesFilterQuality(reader);
  final layerId = fromBytesInt(reader);
  return SceneBuilder_PushShaderMask_Record(
    shader: shader,
    maskRect: maskRect,
    blendMode: blendMode,
    filterQuality: filterQuality,
    layerId: layerId,
  );
}

void toBytesSceneBuilderPushShaderMaskRecord(ContextBytesWriter writer, SceneBuilder_PushShaderMask_Record value) {
  toBytesShader(writer, value.shader);
  toBytesRect(writer, value.maskRect);
  toBytesBlendMode(writer, value.blendMode);
  toBytesFilterQuality(writer, value.filterQuality);
  toBytesInt(writer, value.layerId);
}

SceneBuilder_Pop_Record fromBytesSceneBuilderPopRecord(ContextBytesReader reader) {
  return SceneBuilder_Pop_Record();
}

void toBytesSceneBuilderPopRecord(ContextBytesWriter writer, SceneBuilder_Pop_Record value) {}

SceneBuilder_AddRetained_Record fromBytesSceneBuilderAddRetainedRecord(ContextBytesReader reader) {
  final retainedLayerId = fromBytesInt(reader);
  return SceneBuilder_AddRetained_Record(retainedLayerId: retainedLayerId);
}

void toBytesSceneBuilderAddRetainedRecord(ContextBytesWriter writer, SceneBuilder_AddRetained_Record value) {
  toBytesInt(writer, value.retainedLayerId);
}

SceneBuilder_AddPerformanceOverlay_Record fromBytesSceneBuilderAddPerformanceOverlayRecord(ContextBytesReader reader) {
  final enabledOptions = fromBytesInt(reader);
  final bounds = fromBytesRect(reader);
  return SceneBuilder_AddPerformanceOverlay_Record(
    enabledOptions: enabledOptions,
    bounds: bounds,
  );
}

void toBytesSceneBuilderAddPerformanceOverlayRecord(
    ContextBytesWriter writer, SceneBuilder_AddPerformanceOverlay_Record value) {
  toBytesInt(writer, value.enabledOptions);
  toBytesRect(writer, value.bounds);
}

SceneBuilder_AddPicture_Record fromBytesSceneBuilderAddPictureRecord(ContextBytesReader reader) {
  final offset = fromBytesOffset(reader);
  final picture = fromBytesPicture(reader);
  final isComplexHint = fromBytesBool(reader);
  final willChangeHint = fromBytesBool(reader);
  return SceneBuilder_AddPicture_Record(
    offset: offset,
    picture: picture,
    isComplexHint: isComplexHint,
    willChangeHint: willChangeHint,
  );
}

void toBytesSceneBuilderAddPictureRecord(ContextBytesWriter writer, SceneBuilder_AddPicture_Record value) {
  toBytesOffset(writer, value.offset);
  toBytesPicture(writer, value.picture);
  toBytesBool(writer, value.isComplexHint);
  toBytesBool(writer, value.willChangeHint);
}

SceneBuilder_AddTexture_Record fromBytesSceneBuilderAddTextureRecord(ContextBytesReader reader) {
  final textureId = fromBytesInt(reader);
  final offset = fromBytesOffset(reader);
  final width = fromBytesDouble(reader);
  final height = fromBytesDouble(reader);
  final freeze = fromBytesBool(reader);
  final filterQuality = fromBytesFilterQuality(reader);
  return SceneBuilder_AddTexture_Record(
    textureId: textureId,
    offset: offset,
    width: width,
    height: height,
    freeze: freeze,
    filterQuality: filterQuality,
  );
}

void toBytesSceneBuilderAddTextureRecord(ContextBytesWriter writer, SceneBuilder_AddTexture_Record value) {
  toBytesInt(writer, value.textureId);
  toBytesOffset(writer, value.offset);
  toBytesDouble(writer, value.width);
  toBytesDouble(writer, value.height);
  toBytesBool(writer, value.freeze);
  toBytesFilterQuality(writer, value.filterQuality);
}

SceneBuilder_AddPlatformView_Record fromBytesSceneBuilderAddPlatformViewRecord(ContextBytesReader reader) {
  final viewId = fromBytesInt(reader);
  final offset = fromBytesOffset(reader);
  final width = fromBytesDouble(reader);
  final height = fromBytesDouble(reader);
  return SceneBuilder_AddPlatformView_Record(
    viewId: viewId,
    offset: offset,
    width: width,
    height: height,
  );
}

void toBytesSceneBuilderAddPlatformViewRecord(ContextBytesWriter writer, SceneBuilder_AddPlatformView_Record value) {
  toBytesInt(writer, value.viewId);
  toBytesOffset(writer, value.offset);
  toBytesDouble(writer, value.width);
  toBytesDouble(writer, value.height);
}

Canvas_Save_Record fromBytesCanvasSaveRecord(ContextBytesReader reader) {
  return Canvas_Save_Record();
}

void toBytesCanvasSaveRecord(ContextBytesWriter writer, Canvas_Save_Record value) {}

Canvas_SaveLayer_Record fromBytesCanvasSaveLayerRecord(ContextBytesReader reader) {
  final bounds = fromBytesNullable(reader, fromBytesRect);
  final paint = fromBytesPaint(reader);
  return Canvas_SaveLayer_Record(
    bounds: bounds,
    paint: paint,
  );
}

void toBytesCanvasSaveLayerRecord(ContextBytesWriter writer, Canvas_SaveLayer_Record value) {
  toBytesNullable(writer, value.bounds, toBytesRect);
  toBytesPaint(writer, value.paint);
}

Canvas_Restore_Record fromBytesCanvasRestoreRecord(ContextBytesReader reader) {
  return Canvas_Restore_Record();
}

void toBytesCanvasRestoreRecord(ContextBytesWriter writer, Canvas_Restore_Record value) {}

Canvas_RestoreToCount_Record fromBytesCanvasRestoreToCountRecord(ContextBytesReader reader) {
  final count = fromBytesInt(reader);
  return Canvas_RestoreToCount_Record(count: count);
}

void toBytesCanvasRestoreToCountRecord(ContextBytesWriter writer, Canvas_RestoreToCount_Record value) {
  toBytesInt(writer, value.count);
}

Canvas_Translate_Record fromBytesCanvasTranslateRecord(ContextBytesReader reader) {
  final dx = fromBytesDouble(reader);
  final dy = fromBytesDouble(reader);
  return Canvas_Translate_Record(
    dx: dx,
    dy: dy,
  );
}

void toBytesCanvasTranslateRecord(ContextBytesWriter writer, Canvas_Translate_Record value) {
  toBytesDouble(writer, value.dx);
  toBytesDouble(writer, value.dy);
}

Canvas_Scale_Record fromBytesCanvasScaleRecord(ContextBytesReader reader) {
  final sx = fromBytesDouble(reader);
  final sy = fromBytesNullable(reader, fromBytesDouble);
  return Canvas_Scale_Record(
    sx: sx,
    sy: sy,
  );
}

void toBytesCanvasScaleRecord(ContextBytesWriter writer, Canvas_Scale_Record value) {
  toBytesDouble(writer, value.sx);
  toBytesNullable(writer, value.sy, toBytesDouble);
}

Canvas_Rotate_Record fromBytesCanvasRotateRecord(ContextBytesReader reader) {
  final radians = fromBytesDouble(reader);
  return Canvas_Rotate_Record(radians: radians);
}

void toBytesCanvasRotateRecord(ContextBytesWriter writer, Canvas_Rotate_Record value) {
  toBytesDouble(writer, value.radians);
}

Canvas_Skew_Record fromBytesCanvasSkewRecord(ContextBytesReader reader) {
  final sx = fromBytesDouble(reader);
  final sy = fromBytesDouble(reader);
  return Canvas_Skew_Record(
    sx: sx,
    sy: sy,
  );
}

void toBytesCanvasSkewRecord(ContextBytesWriter writer, Canvas_Skew_Record value) {
  toBytesDouble(writer, value.sx);
  toBytesDouble(writer, value.sy);
}

Canvas_Transform_Record fromBytesCanvasTransformRecord(ContextBytesReader reader) {
  final matrix4 = fromBytesFloat64List(reader);
  return Canvas_Transform_Record(matrix4: matrix4);
}

void toBytesCanvasTransformRecord(ContextBytesWriter writer, Canvas_Transform_Record value) {
  toBytesFloat64List(writer, value.matrix4);
}

Canvas_ClipRect_Record fromBytesCanvasClipRectRecord(ContextBytesReader reader) {
  final rect = fromBytesRect(reader);
  final clipOp = fromBytesClipOp(reader);
  final doAntiAlias = fromBytesBool(reader);
  return Canvas_ClipRect_Record(
    rect: rect,
    clipOp: clipOp,
    doAntiAlias: doAntiAlias,
  );
}

void toBytesCanvasClipRectRecord(ContextBytesWriter writer, Canvas_ClipRect_Record value) {
  toBytesRect(writer, value.rect);
  toBytesClipOp(writer, value.clipOp);
  toBytesBool(writer, value.doAntiAlias);
}

Canvas_ClipRRect_Record fromBytesCanvasClipRRectRecord(ContextBytesReader reader) {
  final rrect = fromBytesRRect(reader);
  final doAntiAlias = fromBytesBool(reader);
  return Canvas_ClipRRect_Record(
    rrect: rrect,
    doAntiAlias: doAntiAlias,
  );
}

void toBytesCanvasClipRRectRecord(ContextBytesWriter writer, Canvas_ClipRRect_Record value) {
  toBytesRRect(writer, value.rrect);
  toBytesBool(writer, value.doAntiAlias);
}

Canvas_ClipPath_Record fromBytesCanvasClipPathRecord(ContextBytesReader reader) {
  final path = fromBytesPath(reader);
  final doAntiAlias = fromBytesBool(reader);
  return Canvas_ClipPath_Record(
    path: path,
    doAntiAlias: doAntiAlias,
  );
}

void toBytesCanvasClipPathRecord(ContextBytesWriter writer, Canvas_ClipPath_Record value) {
  toBytesPath(writer, value.path);
  toBytesBool(writer, value.doAntiAlias);
}

Canvas_DrawColor_Record fromBytesCanvasDrawColorRecord(ContextBytesReader reader) {
  final color = fromBytesColor(reader);
  final blendMode = fromBytesBlendMode(reader);
  return Canvas_DrawColor_Record(
    color: color,
    blendMode: blendMode,
  );
}

void toBytesCanvasDrawColorRecord(ContextBytesWriter writer, Canvas_DrawColor_Record value) {
  toBytesColor(writer, value.color);
  toBytesBlendMode(writer, value.blendMode);
}

Canvas_DrawLine_Record fromBytesCanvasDrawLineRecord(ContextBytesReader reader) {
  final p1 = fromBytesOffset(reader);
  final p2 = fromBytesOffset(reader);
  final paint = fromBytesPaint(reader);
  return Canvas_DrawLine_Record(
    p1: p1,
    p2: p2,
    paint: paint,
  );
}

void toBytesCanvasDrawLineRecord(ContextBytesWriter writer, Canvas_DrawLine_Record value) {
  toBytesOffset(writer, value.p1);
  toBytesOffset(writer, value.p2);
  toBytesPaint(writer, value.paint);
}

Canvas_DrawPaint_Record fromBytesCanvasDrawPaintRecord(ContextBytesReader reader) {
  final paint = fromBytesPaint(reader);
  return Canvas_DrawPaint_Record(paint: paint);
}

void toBytesCanvasDrawPaintRecord(ContextBytesWriter writer, Canvas_DrawPaint_Record value) {
  toBytesPaint(writer, value.paint);
}

Canvas_DrawRect_Record fromBytesCanvasDrawRectRecord(ContextBytesReader reader) {
  final rect = fromBytesRect(reader);
  final paint = fromBytesPaint(reader);
  return Canvas_DrawRect_Record(
    rect: rect,
    paint: paint,
  );
}

void toBytesCanvasDrawRectRecord(ContextBytesWriter writer, Canvas_DrawRect_Record value) {
  toBytesRect(writer, value.rect);
  toBytesPaint(writer, value.paint);
}

Canvas_DrawRRect_Record fromBytesCanvasDrawRRectRecord(ContextBytesReader reader) {
  final rrect = fromBytesRRect(reader);
  final paint = fromBytesPaint(reader);
  return Canvas_DrawRRect_Record(
    rrect: rrect,
    paint: paint,
  );
}

void toBytesCanvasDrawRRectRecord(ContextBytesWriter writer, Canvas_DrawRRect_Record value) {
  toBytesRRect(writer, value.rrect);
  toBytesPaint(writer, value.paint);
}

Canvas_DrawDRRect_Record fromBytesCanvasDrawDRRectRecord(ContextBytesReader reader) {
  final outer = fromBytesRRect(reader);
  final inner = fromBytesRRect(reader);
  final paint = fromBytesPaint(reader);
  return Canvas_DrawDRRect_Record(
    outer: outer,
    inner: inner,
    paint: paint,
  );
}

void toBytesCanvasDrawDRRectRecord(ContextBytesWriter writer, Canvas_DrawDRRect_Record value) {
  toBytesRRect(writer, value.outer);
  toBytesRRect(writer, value.inner);
  toBytesPaint(writer, value.paint);
}

Canvas_DrawOval_Record fromBytesCanvasDrawOvalRecord(ContextBytesReader reader) {
  final rect = fromBytesRect(reader);
  final paint = fromBytesPaint(reader);
  return Canvas_DrawOval_Record(
    rect: rect,
    paint: paint,
  );
}

void toBytesCanvasDrawOvalRecord(ContextBytesWriter writer, Canvas_DrawOval_Record value) {
  toBytesRect(writer, value.rect);
  toBytesPaint(writer, value.paint);
}

Canvas_DrawCircle_Record fromBytesCanvasDrawCircleRecord(ContextBytesReader reader) {
  final c = fromBytesOffset(reader);
  final radius = fromBytesDouble(reader);
  final paint = fromBytesPaint(reader);
  return Canvas_DrawCircle_Record(
    c: c,
    radius: radius,
    paint: paint,
  );
}

void toBytesCanvasDrawCircleRecord(ContextBytesWriter writer, Canvas_DrawCircle_Record value) {
  toBytesOffset(writer, value.c);
  toBytesDouble(writer, value.radius);
  toBytesPaint(writer, value.paint);
}

Canvas_DrawArc_Record fromBytesCanvasDrawArcRecord(ContextBytesReader reader) {
  final rect = fromBytesRect(reader);
  final startAngle = fromBytesDouble(reader);
  final sweepAngle = fromBytesDouble(reader);
  final useCenter = fromBytesBool(reader);
  final paint = fromBytesPaint(reader);
  return Canvas_DrawArc_Record(
    rect: rect,
    startAngle: startAngle,
    sweepAngle: sweepAngle,
    useCenter: useCenter,
    paint: paint,
  );
}

void toBytesCanvasDrawArcRecord(ContextBytesWriter writer, Canvas_DrawArc_Record value) {
  toBytesRect(writer, value.rect);
  toBytesDouble(writer, value.startAngle);
  toBytesDouble(writer, value.sweepAngle);
  toBytesBool(writer, value.useCenter);
  toBytesPaint(writer, value.paint);
}

Canvas_DrawPath_Record fromBytesCanvasDrawPathRecord(ContextBytesReader reader) {
  final path = fromBytesPath(reader);
  final paint = fromBytesPaint(reader);
  return Canvas_DrawPath_Record(
    path: path,
    paint: paint,
  );
}

void toBytesCanvasDrawPathRecord(ContextBytesWriter writer, Canvas_DrawPath_Record value) {
  toBytesPath(writer, value.path);
  toBytesPaint(writer, value.paint);
}

Canvas_DrawImage_Record fromBytesCanvasDrawImageRecord(ContextBytesReader reader) {
  final image = fromBytesImage(reader);
  final offset = fromBytesOffset(reader);
  final paint = fromBytesPaint(reader);
  return Canvas_DrawImage_Record(
    image: image,
    offset: offset,
    paint: paint,
  );
}

void toBytesCanvasDrawImageRecord(ContextBytesWriter writer, Canvas_DrawImage_Record value) {
  toBytesImage(writer, value.image);
  toBytesOffset(writer, value.offset);
  toBytesPaint(writer, value.paint);
}

Canvas_DrawImageRect_Record fromBytesCanvasDrawImageRectRecord(ContextBytesReader reader) {
  final image = fromBytesImage(reader);
  final src = fromBytesRect(reader);
  final dst = fromBytesRect(reader);
  final paint = fromBytesPaint(reader);
  return Canvas_DrawImageRect_Record(
    image: image,
    src: src,
    dst: dst,
    paint: paint,
  );
}

void toBytesCanvasDrawImageRectRecord(ContextBytesWriter writer, Canvas_DrawImageRect_Record value) {
  toBytesImage(writer, value.image);
  toBytesRect(writer, value.src);
  toBytesRect(writer, value.dst);
  toBytesPaint(writer, value.paint);
}

Canvas_DrawImageNine_Record fromBytesCanvasDrawImageNineRecord(ContextBytesReader reader) {
  final image = fromBytesImage(reader);
  final center = fromBytesRect(reader);
  final dst = fromBytesRect(reader);
  final paint = fromBytesPaint(reader);
  return Canvas_DrawImageNine_Record(
    image: image,
    center: center,
    dst: dst,
    paint: paint,
  );
}

void toBytesCanvasDrawImageNineRecord(ContextBytesWriter writer, Canvas_DrawImageNine_Record value) {
  toBytesImage(writer, value.image);
  toBytesRect(writer, value.center);
  toBytesRect(writer, value.dst);
  toBytesPaint(writer, value.paint);
}

Canvas_DrawPicture_Record fromBytesCanvasDrawPictureRecord(ContextBytesReader reader) {
  final picture = fromBytesPicture(reader);
  return Canvas_DrawPicture_Record(picture: picture);
}

void toBytesCanvasDrawPictureRecord(ContextBytesWriter writer, Canvas_DrawPicture_Record value) {
  toBytesPicture(writer, value.picture);
}

Canvas_DrawParagraph_Record fromBytesCanvasDrawParagraphRecord(ContextBytesReader reader) {
  final paragraph = fromBytesParagraph(reader);
  final offset = fromBytesOffset(reader);
  return Canvas_DrawParagraph_Record(
    paragraph: paragraph,
    offset: offset,
  );
}

void toBytesCanvasDrawParagraphRecord(ContextBytesWriter writer, Canvas_DrawParagraph_Record value) {
  toBytesParagraph(writer, value.paragraph);
  toBytesOffset(writer, value.offset);
}

Canvas_DrawPoints_Record fromBytesCanvasDrawPointsRecord(ContextBytesReader reader) {
  final pointMode = fromBytesPointMode(reader);
  final points = fromBytesList(reader, fromBytesOffset);
  final paint = fromBytesPaint(reader);
  return Canvas_DrawPoints_Record(
    pointMode: pointMode,
    points: points,
    paint: paint,
  );
}

void toBytesCanvasDrawPointsRecord(ContextBytesWriter writer, Canvas_DrawPoints_Record value) {
  toBytesPointMode(writer, value.pointMode);
  toBytesList(writer, value.points, toBytesOffset);
  toBytesPaint(writer, value.paint);
}

Canvas_DrawRawPoints_Record fromBytesCanvasDrawRawPointsRecord(ContextBytesReader reader) {
  final pointMode = fromBytesPointMode(reader);
  final points = fromBytesFloat32List(reader);
  final paint = fromBytesPaint(reader);
  return Canvas_DrawRawPoints_Record(
    pointMode: pointMode,
    points: points,
    paint: paint,
  );
}

void toBytesCanvasDrawRawPointsRecord(ContextBytesWriter writer, Canvas_DrawRawPoints_Record value) {
  toBytesPointMode(writer, value.pointMode);
  toBytesFloat32List(writer, value.points);
  toBytesPaint(writer, value.paint);
}

Canvas_DrawVertices_Record fromBytesCanvasDrawVerticesRecord(ContextBytesReader reader) {
  final vertices = fromBytesVertices(reader);
  final blendMode = fromBytesBlendMode(reader);
  final paint = fromBytesPaint(reader);
  return Canvas_DrawVertices_Record(
    vertices: vertices,
    blendMode: blendMode,
    paint: paint,
  );
}

void toBytesCanvasDrawVerticesRecord(ContextBytesWriter writer, Canvas_DrawVertices_Record value) {
  toBytesVertices(writer, value.vertices);
  toBytesBlendMode(writer, value.blendMode);
  toBytesPaint(writer, value.paint);
}

Canvas_DrawAtlas_Record fromBytesCanvasDrawAtlasRecord(ContextBytesReader reader) {
  final atlas = fromBytesImage(reader);
  final transforms = fromBytesList(reader, fromBytesRSTransform);
  final rects = fromBytesList(reader, fromBytesRect);
  final colors = fromBytesNullableList(reader, fromBytesColor);
  final blendMode = fromBytesNullable(reader, fromBytesBlendMode);
  final cullRect = fromBytesNullable(reader, fromBytesRect);
  final paint = fromBytesPaint(reader);
  return Canvas_DrawAtlas_Record(
    atlas: atlas,
    transforms: transforms,
    rects: rects,
    colors: colors,
    blendMode: blendMode,
    cullRect: cullRect,
    paint: paint,
  );
}

void toBytesCanvasDrawAtlasRecord(ContextBytesWriter writer, Canvas_DrawAtlas_Record value) {
  toBytesImage(writer, value.atlas);
  toBytesList(writer, value.transforms, toBytesRSTransform);
  toBytesList(writer, value.rects, toBytesRect);
  toBytesNullableList(writer, value.colors, toBytesColor);
  toBytesNullable(writer, value.blendMode, toBytesBlendMode);
  toBytesNullable(writer, value.cullRect, toBytesRect);
  toBytesPaint(writer, value.paint);
}

Canvas_DrawRawAtlas_Record fromBytesCanvasDrawRawAtlasRecord(ContextBytesReader reader) {
  final atlas = fromBytesImage(reader);
  final rstTransforms = fromBytesFloat32List(reader);
  final rects = fromBytesFloat32List(reader);
  final colors = fromBytesNullable(reader, fromBytesInt32List);
  final blendMode = fromBytesNullable(reader, fromBytesBlendMode);
  final cullRect = fromBytesNullable(reader, fromBytesRect);
  final paint = fromBytesPaint(reader);
  return Canvas_DrawRawAtlas_Record(
    atlas: atlas,
    rstTransforms: rstTransforms,
    rects: rects,
    colors: colors,
    blendMode: blendMode,
    cullRect: cullRect,
    paint: paint,
  );
}

void toBytesCanvasDrawRawAtlasRecord(ContextBytesWriter writer, Canvas_DrawRawAtlas_Record value) {
  toBytesImage(writer, value.atlas);
  toBytesFloat32List(writer, value.rstTransforms);
  toBytesFloat32List(writer, value.rects);
  toBytesNullable(writer, value.colors, toBytesInt32List);
  toBytesNullable(writer, value.blendMode, toBytesBlendMode);
  toBytesNullable(writer, value.cullRect, toBytesRect);
  toBytesPaint(writer, value.paint);
}

Canvas_DrawShadow_Record fromBytesCanvasDrawShadowRecord(ContextBytesReader reader) {
  final path = fromBytesPath(reader);
  final color = fromBytesColor(reader);
  final elevation = fromBytesDouble(reader);
  final transparentOccluder = fromBytesBool(reader);
  return Canvas_DrawShadow_Record(
    path: path,
    color: color,
    elevation: elevation,
    transparentOccluder: transparentOccluder,
  );
}

void toBytesCanvasDrawShadowRecord(ContextBytesWriter writer, Canvas_DrawShadow_Record value) {
  toBytesPath(writer, value.path);
  toBytesColor(writer, value.color);
  toBytesDouble(writer, value.elevation);
  toBytesBool(writer, value.transparentOccluder);
}

ParagraphBuilder_PushStyle_Record fromBytesParagraphBuilderPushStyleRecord(ContextBytesReader reader) {
  final style = fromBytesTextStyle(reader);
  return ParagraphBuilder_PushStyle_Record(style: style);
}

void toBytesParagraphBuilderPushStyleRecord(ContextBytesWriter writer, ParagraphBuilder_PushStyle_Record value) {
  toBytesTextStyle(writer, value.style);
}

ParagraphBuilder_Pop_Record fromBytesParagraphBuilderPopRecord(ContextBytesReader reader) {
  return ParagraphBuilder_Pop_Record();
}

void toBytesParagraphBuilderPopRecord(ContextBytesWriter writer, ParagraphBuilder_Pop_Record value) {}

ParagraphBuilder_AddText_Record fromBytesParagraphBuilderAddTextRecord(ContextBytesReader reader) {
  final text = fromBytesString(reader);
  return ParagraphBuilder_AddText_Record(text: text);
}

void toBytesParagraphBuilderAddTextRecord(ContextBytesWriter writer, ParagraphBuilder_AddText_Record value) {
  toBytesString(writer, value.text);
}

ParagraphBuilder_AddPlaceholder_Record fromBytesParagraphBuilderAddPlaceholderRecord(ContextBytesReader reader) {
  final width = fromBytesDouble(reader);
  final height = fromBytesDouble(reader);
  final alignment = fromBytesPlaceholderAlignment(reader);
  final scale = fromBytesDouble(reader);
  final baselineOffset = fromBytesNullable(reader, fromBytesDouble);
  final baseline = fromBytesNullable(reader, fromBytesTextBaseline);
  return ParagraphBuilder_AddPlaceholder_Record(
    width: width,
    height: height,
    alignment: alignment,
    scale: scale,
    baselineOffset: baselineOffset,
    baseline: baseline,
  );
}

void toBytesParagraphBuilderAddPlaceholderRecord(
    ContextBytesWriter writer, ParagraphBuilder_AddPlaceholder_Record value) {
  toBytesDouble(writer, value.width);
  toBytesDouble(writer, value.height);
  toBytesPlaceholderAlignment(writer, value.alignment);
  toBytesDouble(writer, value.scale);
  toBytesNullable(writer, value.baselineOffset, toBytesDouble);
  toBytesNullable(writer, value.baseline, toBytesTextBaseline);
}
